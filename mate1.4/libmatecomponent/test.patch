diff -ur libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-init.c work/src/libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-init.c
--- libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-init.c	2012-07-05 17:06:42.000000000 +0000
+++ work/src/libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-init.c	2013-05-27 07:04:08.957127292 +0000
@@ -46,7 +46,7 @@
 
 #include <matecorba/matecorba.h>
 
-GStaticRecMutex _matecomponent_activation_guard = G_STATIC_REC_MUTEX_INIT;
+GRecMutex _matecomponent_activation_guard;
 static CORBA_ORB matecomponent_activation_orb = CORBA_OBJECT_NIL;
 static CORBA_Context matecomponent_activation_context;
 static gboolean is_initialized = FALSE;
diff -ur libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-private.h work/src/libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-private.h
--- libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-private.h	2012-07-05 17:06:42.000000000 +0000
+++ work/src/libmatecomponent-1.4.0/matecomponent-activation/matecomponent-activation-private.h	2013-05-27 07:04:08.961127296 +0000
@@ -31,9 +31,9 @@
 
 #define MATECOMPONENT_ACTIVATION_FACTORY_PRIVATE_TIMEOUT 1
 
-extern GStaticRecMutex _matecomponent_activation_guard;
-#define MATECOMPONENT_ACTIVATION_LOCK()   g_static_rec_mutex_lock   (&_matecomponent_activation_guard)
-#define MATECOMPONENT_ACTIVATION_UNLOCK() g_static_rec_mutex_unlock (&_matecomponent_activation_guard)
+extern GRecMutex _matecomponent_activation_guard;
+#define MATECOMPONENT_ACTIVATION_LOCK()   g_rec_mutex_lock   (&_matecomponent_activation_guard)
+#define MATECOMPONENT_ACTIVATION_UNLOCK() g_rec_mutex_unlock (&_matecomponent_activation_guard)
 
 void         matecomponent_activation_timeout_reg_check_set  (gboolean           on);
 gboolean     matecomponent_activation_timeout_reg_check      (gpointer           data);
diff -ur libmatecomponent-1.4.0/activation-server/activation-server-main.c work/src/libmatecomponent-1.4.0/activation-server/activation-server-main.c
--- libmatecomponent-1.4.0/activation-server/activation-server-main.c	2012-07-05 17:06:42.000000000 +0000
+++ work/src/libmatecomponent-1.4.0/activation-server/activation-server-main.c	2013-05-27 07:06:21.175149787 +0000
@@ -68,7 +68,7 @@
 
 static gboolean        server_threaded = FALSE;
 static glong           server_guard_depth = 0;
-static GStaticRecMutex server_guard = G_STATIC_REC_MUTEX_INIT;
+static GRecMutex server_guard;
 
 static PortableServer_POA
 server_get_poa (void)
@@ -102,7 +102,7 @@
 #endif
         server_guard_depth = 0;
         for (i = 0; i < state; i++)
-                g_static_rec_mutex_unlock (&server_guard);
+                g_rec_mutex_unlock (&server_guard);
         return state;
 }
 
@@ -115,7 +115,7 @@
                 return;
 
         for (i = 0; i < state; i++)
-                g_static_rec_mutex_lock (&server_guard);
+                g_rec_mutex_lock (&server_guard);
         server_guard_depth = state;
 #ifdef MATECOMPONENT_ACTIVATION_DEBUG
         fprintf (stderr, "thread %p re-taken server guard with depth %ld\n",
@@ -129,7 +129,7 @@
         if (!server_threaded)
                 return;
 
-        g_static_rec_mutex_lock (&server_guard);
+        g_rec_mutex_lock (&server_guard);
         server_guard_depth++;
         fprintf (stderr, "thread %p take guard [%ld]\n",
                  g_thread_self (), server_guard_depth);
@@ -144,7 +144,7 @@
         fprintf (stderr, "thread %p release guard [%ld]\n",
                  g_thread_self (), server_guard_depth);
         server_guard_depth--;
-        g_static_rec_mutex_unlock (&server_guard);
+        g_rec_mutex_unlock (&server_guard);
 }
 
 #ifdef G_OS_WIN32
